name: Production Deployment

on:
  workflow_call:
    inputs:
      app-path:
        description: 'Path to the application on the target server'
        required: false
        type: string
        default: '/var/www/vhosts/multisender.easy-go.me'
      artifact-name:
        description: 'Name of the artifact to download'
        required: false
        type: string
        default: 'build-output'
      artifact-path:
        description: 'Path to the artifact to download'
        required: false
        type: string
        default: 'build'
        
jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment Variables
        id: set-env-vars
        run: |
          echo "AWS_REGION=${{ secrets.AWS_PROD_REGION }}" >> $GITHUB_OUTPUT
          echo "AWS_INSTANCE_ID=${{ secrets.AWS_PROD_INSTANCE_ID }}" >> $GITHUB_OUTPUT
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_PROD_ACCESS_KEY_ID }}" >> $GITHUB_OUTPUT
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}" >> $GITHUB_OUTPUT
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ steps.set-env-vars.outputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ steps.set-env-vars.outputs.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ steps.set-env-vars.outputs.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.artifact-path }}

      - name: Create deployment package
        id: create-package
        run: |
          cd ${{ inputs.artifact-path }}
          # デプロイパッケージをtarに圧縮して一時ファイルとして保存
          tar -czf ../deployment-package.tar.gz *
          # GitHub Artifactのダウンロード用URLを生成（注：GitHub Actionsでは直接取得できないため対応が必要）
          GITHUB_API_URL="https://api.github.com/repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/artifacts"
          echo "artifacts_api_url=${GITHUB_API_URL}" >> $GITHUB_OUTPUT
          echo "run_id=${GITHUB_RUN_ID}" >> $GITHUB_OUTPUT
          echo "repository=${GITHUB_REPOSITORY}" >> $GITHUB_OUTPUT

      - name: Deploy using SSM
        run: |
          # SSMを使用してデプロイスクリプトを実行
          aws ssm send-command \
            --instance-ids ${{ steps.set-env-vars.outputs.AWS_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{
              "commands": [
                "sudo su deploy",
                "cd ${{ inputs.app-path }}",
                "rm -rf ./* || true",
                "# GitHubアーティファクトからダウンロード",
                "TOKEN=\"${{ secrets.GITHUB_TOKEN }}\"",
                "REPO=\"${{ steps.create-package.outputs.repository }}\"",
                "RUN_ID=\"${{ steps.create-package.outputs.run_id }}\"",
                "ARTIFACT_NAME=\"${{ inputs.artifact-name }}\"",
                "# Artifactのダウンロード（認証付き）",
                "curl -L -H \"Authorization: token ${TOKEN}\" -H \"Accept: application/vnd.github+json\" \"https://api.github.com/repos/${REPO}/actions/artifacts\" | jq \".artifacts[] | select(.name==\\\"${ARTIFACT_NAME}\\\") | .archive_download_url\" -r | xargs curl -L -H \"Authorization: token ${TOKEN}\" --output artifact.zip",
                "# 展開",
                "unzip artifact.zip",
                "rm artifact.zip",
                "# アプリケーション再起動",
                "pm2 restart npm --name multisender-pm2 -- run prod",
                "pm2 ls"
              ]
            }' \
            --output text 