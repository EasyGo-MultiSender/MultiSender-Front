name: Production Deployment

on:
  workflow_call:
    inputs:
      app-path:
        description: 'Path to the application on the target server'
        required: false
        type: string
        default: '/var/www/vhosts/multisender.easy-go.me'
      artifact-name:
        description: 'Name of the artifact to download'
        required: false
        type: string
        default: 'build-output'
      artifact-path:
        description: 'Path to the artifact to download'
        required: false
        type: string
        default: 'build'
        
jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment Variables
        id: set-env-vars
        run: |
          echo "AWS_REGION=${{ secrets.AWS_PROD_REGION }}" >> $GITHUB_OUTPUT
          echo "AWS_INSTANCE_ID=${{ secrets.AWS_PROD_INSTANCE_ID }}" >> $GITHUB_OUTPUT
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_PROD_ACCESS_KEY_ID }}" >> $GITHUB_OUTPUT
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}" >> $GITHUB_OUTPUT
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ steps.set-env-vars.outputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ steps.set-env-vars.outputs.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ steps.set-env-vars.outputs.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.artifact-path }}

      - name: Create deployment package
        id: create-package
        run: |
          cd ${{ inputs.artifact-path }}
          # デプロイパッケージをtarに圧縮して一時ファイルとして保存
          tar -czf ../deployment-package.tar.gz *
          # GitHubのリポジトリとランID情報を設定
          echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "run_id=${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Get artifact URL
        id: get-artifact-url
        run: |
          # 必要な変数を設定
          REPO="${{ github.repository }}"
          ARTIFACT_NAME="${{ inputs.artifact-name }}"
          # GitHubトークンを使用してアーティファクトURLを取得
          echo "artifact_url=\"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ github.workflow }}\"" >> $GITHUB_OUTPUT
          # トークンを出力変数に設定
          echo "token=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT

      - name: Deploy using SSM
        run: |
          # SSMを使用してデプロイスクリプトを実行
          aws ssm send-command \
            --instance-ids ${{ steps.set-env-vars.outputs.AWS_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{
              "commands": [
                "sudo su deploy",
                "cd ${{ inputs.app-path }}",
                "rm -rf ./* || true",
                "# URLからアーティファクトをダウンロード",
                "curl -L -H \"Authorization: token ${{ steps.get-artifact-url.outputs.token }}\" \"${{ steps.get-artifact-url.outputs.artifact_url }}\" --output artifact.zip",
                "# 展開",
                "unzip -q artifact.zip",
                "rm artifact.zip",
                "# アプリケーション再起動",
                "pm2 restart npm --name multisender-pm2 -- run prod",
                "pm2 ls"
              ]
            }' \
            --output text 