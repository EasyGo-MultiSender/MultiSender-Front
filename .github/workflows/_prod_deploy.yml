name: Production Deployment

on:
  workflow_call:
    inputs:
      app-path:
        description: 'Path to the application on the target server'
        required: false
        type: string
        default: '/var/www/vhosts/multisender.easy-go.me'
      artifact-url:
        description: 'URL of the artifact to download'
        required: false
        type: string
        
jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment Variables
        id: set-env-vars
        run: |
          echo "AWS_REGION=${{ secrets.AWS_PROD_REGION }}" >> $GITHUB_OUTPUT
          echo "AWS_INSTANCE_ID=${{ secrets.AWS_PROD_INSTANCE_ID }}" >> $GITHUB_OUTPUT
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_PROD_ACCESS_KEY_ID }}" >> $GITHUB_OUTPUT
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}" >> $GITHUB_OUTPUT
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ steps.set-env-vars.outputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ steps.set-env-vars.outputs.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ steps.set-env-vars.outputs.AWS_REGION }}

      - name: Deploy using SSM
        id: deploy-ssm
        run: |
          # SSMを使用してデプロイスクリプトを実行し、コマンドIDを保存
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ steps.set-env-vars.outputs.AWS_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{
              "commands": [
                "sudo su deploy",
                "cd ${{ inputs.app-path }}",
                "rm -rf ./* || true",
                "# URLからアーティファクトをダウンロード",
                "curl -L -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" ${{ inputs.artifact-url }} --output artifact.zip",
                "# 展開",
                "unzip -q artifact.zip",
                "rm artifact.zip",
                "# アプリケーション再起動",
                "pm2 restart npm --name multisender-pm2 -- run prod",
                "pm2 ls"
              ]
            }' \
            --output json | jq -r '.Command.CommandId')
          
          echo "command-id=$COMMAND_ID" >> $GITHUB_OUTPUT
          echo "Command ID: $COMMAND_ID"
          
          # コマンドの実行結果を待つ（最大5分）
          echo "コマンドの実行状況を確認しています..."
          for i in {1..30}; do
            # get-command-invocationを使用してコマンドの状態を確認
            # AccessDeniedExceptionを回避するためにlist-commandsではなくこちらを使用
            RESULT=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ steps.set-env-vars.outputs.AWS_INSTANCE_ID }}" \
              --output json 2>/dev/null || echo '{"Status":"Running"}')
            
            # コマンドの状態を取得
            STATUS=$(echo "$RESULT" | jq -r '.Status')
            
            echo "コマンドの状態: $STATUS"
            
            # 成功または失敗した場合は終了
            if [ "$STATUS" = "Success" ]; then
              echo "コマンドが正常に完了しました。"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
              echo "コマンドが失敗しました: $STATUS"
              echo "$RESULT" | jq .
              exit 1
            elif [ "$STATUS" = "Pending" ] || [ "$STATUS" = "InProgress" ] || [ "$STATUS" = "Delayed" ] || [ "$STATUS" = "Running" ]; then
              # まだ実行中の場合は10秒待機
              echo "コマンドはまだ実行中です。10秒待機します..."
              sleep 10
            else
              # 不明な状態の場合
              echo "コマンドは不明な状態です: $STATUS"
              echo "$RESULT" | jq .
              # 10秒待機して再確認
              sleep 10
            fi
          done
          
          # 30回のループが終了したが成功も失敗もしていない場合
          if [ "$STATUS" != "Success" ]; then
            echo "コマンドは30回の確認後も完了していません。タイムアウトとみなします。"
            # 最終状態を表示
            echo "$RESULT" | jq .
            exit 1
          fi
          
          # 詳細な実行結果を取得
          echo "デプロイコマンドの実行結果:"
          FINAL_RESULT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ steps.set-env-vars.outputs.AWS_INSTANCE_ID }}" \
            --output json)
          
          echo "$FINAL_RESULT" | jq .
          
          # 標準出力と標準エラー出力を出力
          echo "標準出力:"
          echo "$FINAL_RESULT" | jq -r '.StandardOutputContent'
          
          echo "標準エラー出力:"
          echo "$FINAL_RESULT" | jq -r '.StandardErrorContent'
          
          # 終了ステータスを確認
          EXIT_CODE=$(echo "$FINAL_RESULT" | jq -r '.ResponseCode')
          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "コマンドは非ゼロの終了コードで終了しました: $EXIT_CODE"
            exit $EXIT_CODE
          fi
          
          echo "デプロイが完了しました。" 